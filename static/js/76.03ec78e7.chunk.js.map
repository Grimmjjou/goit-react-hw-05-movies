{"version":3,"file":"static/js/76.03ec78e7.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/Movie-api.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"castMember\":\"Cast_castMember__RY3Nk\",\"name\":\"Cast_name__6UbFm\",\"character\":\"Cast_character__tKDlA\",\"characterName\":\"Cast_characterName__R1bgC\",\"empty\":\"Cast_empty__EEahE\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Loader } from 'components/Loader/Loader';\nimport movieAPI from 'services/Movie-api';\nimport styles from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [empty, setEmpty] = useState(false);\n  const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    setLoading(true);\n    movieAPI\n      .Cast(movieId)\n      .then(result => {\n        if (result.cast.length > 1) {\n          setCast(result.cast);\n        } else {\n          setEmpty(true);\n        }\n      })\n      .catch(error => toast.error(`${error.message}`))\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <ul className={styles.castList}>\n      {cast &&\n        cast.map(actor => {\n          return (\n            <li className={styles.castMember} key={actor.cast_id}>\n              {actor.profile_path ? (\n                <img\n                  src={`${BASE_IMG_URL}${actor.profile_path}`}\n                  alt=\"\"\n                  width=\"180\"\n                  className={styles.photo}\n                />\n              ) : (\n                <img\n                  src=\"https://dummyimage.com/500x750/e3dcdc/0c18c4.jpg&text=Nothing\"\n                  alt=\"\"\n                  width=\"180\"\n                  className={styles.photo}\n                />\n              )}\n              <div>\n                <p className={styles.name}>{actor.name}</p>\n                <p className={styles.character}>Character:</p>\n                {actor.character ? (\n                  <p className={styles.characterName}>{actor.character}</p>\n                ) : (\n                  <p className={styles.characterName}>Cameo</p>\n                )}\n              </div>\n            </li>\n          );\n        })}\n      {loading && <Loader />}\n      {empty && (\n        <p className={styles.empty}>We don't have any cast for this movies.</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API_KEY = '8250a012e9c5de27672edaa1917198ee';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst TRENDING = '/trending/movie/day';\nconst MOVIE_DETAILS = '/movie';\nconst CAST = '/credits';\nconst REVIEWS = '/reviews';\nconst SEARCH = '/search/movie';\n\nasync function moviesTrending() {\n  try {\n    const fetchUrl = `${BASE_URL}${TRENDING}?api_key=${API_KEY}`;\n    const response = await axios.get(fetchUrl);\n\n    if (response) {\n      return response.data.results;\n    }\n\n    return Promise.reject(new Error('Oops! Something went wrong...'));\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function movieDetails(id) {\n  try {\n    const fetchUrl = `${BASE_URL}${MOVIE_DETAILS}/${id}?api_key=${API_KEY}`;\n    const response = await axios.get(fetchUrl);\n\n    if (response) {\n      return response.data;\n    }\n\n    return Promise.reject(new Error('Oops! Something went wrong...'));\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function Cast(id) {\n  try {\n    const fetchUrl = `${BASE_URL}${MOVIE_DETAILS}/${id}${CAST}?api_key=${API_KEY}`;\n    const response = await axios.get(fetchUrl);\n\n    if (response) {\n      return response.data;\n    }\n\n    return Promise.reject(new Error('Oops! Something went wrong...'));\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function reviews(id) {\n  try {\n    const fetchUrl = `${BASE_URL}${MOVIE_DETAILS}/${id}${REVIEWS}?api_key=${API_KEY}`;\n    const response = await axios.get(fetchUrl);\n\n    if (response) {\n      return response.data;\n    }\n\n    return Promise.reject(new Error('Oops! Something went wrong...'));\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nasync function searchMovies(query) {\n  try {\n    const fetchUrl = `${BASE_URL}${SEARCH}?api_key=${API_KEY}&query=${query}`;\n    const response = await axios.get(fetchUrl);\n\n    if (response) {\n      return response.data;\n    }\n\n    return Promise.reject(new Error('Oops! Something went wrong...'));\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nconst movieAPI = {\n  moviesTrending,\n  movieDetails,\n  Cast,\n  reviews,\n  searchMovies,\n};\n\nexport default movieAPI;\n"],"names":["movieId","useParams","useState","cast","setCast","loading","setLoading","empty","setEmpty","useEffect","movieAPI","then","result","length","catch","error","toast","message","finally","className","styles","map","actor","profile_path","src","alt","width","name","character","cast_id","Loader","API_KEY","BASE_URL","TRENDING","MOVIE_DETAILS","CAST","REVIEWS","SEARCH","moviesTrending","fetchUrl","axios","response","data","results","Promise","reject","Error","movieDetails","id","Cast","reviews","searchMovies","query"],"sourceRoot":""}